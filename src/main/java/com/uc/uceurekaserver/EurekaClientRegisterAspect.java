package com.uc.uceurekaserver;import com.google.common.base.Preconditions;import com.google.common.base.Splitter;import com.google.common.collect.Sets;import com.netflix.appinfo.InstanceInfo;import org.apache.commons.net.util.SubnetUtils;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Configuration;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import javax.annotation.Resource;import java.util.Set;/** * @author 9527 * @ClassName EurekaClientRegisterAspect * @Date 2020/1/15 * @Description TODO * @Version 1.0 */@Aspect@Component@Configuration@Order(0)public class EurekaClientRegisterAspect {    @Resource    private WhiteListProcessor whiteListProcessor;    @Around(value = "execution(* org.springframework.cloud.netflix.eureka.server.InstanceRegistry.register(..))")    public Object process(final ProceedingJoinPoint pjp) throws Throwable {        Object[] args = pjp.getArgs();        if (null != args && args.length != 0) {            for (Object arg : args) {                if (arg instanceof InstanceInfo) {                    InstanceInfo info = (InstanceInfo) arg;                    String ip = info.getIPAddr();                    System.out.println("发起注册的ip为：" + ip);                    boolean valid = whiteListProcessor.validateIp(ip) ;                    Preconditions.checkArgument(valid, "禁止注册:发起注册的ip不白名单中 [IP:" + ip + "]");                }            }        }        return pjp.proceed();    }    @Component    public static class WhiteListProcessor implements InitializingBean {        @Value("${custom.eureka.client.whitelist}")        private String whitelist;        private Set<String> whiteIps;        @SuppressWarnings("all")        @Override        public void afterPropertiesSet() {            Splitter splitter = Splitter.on(",").omitEmptyStrings().trimResults();            whiteIps = Sets.newLinkedHashSet(splitter.splitToList(whitelist));        }        public boolean validateIp(String ip) {            return CollectionUtils.isEmpty(whiteIps) || whiteIps.contains(ip);        }    }}